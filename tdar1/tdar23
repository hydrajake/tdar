#!/bin/bash
# tdar
# Version 2.3
# Updated 10/27/2025
# Totals numeric or time-based fields by date
# Usage: tdar <file_name> <field_name> <date>
# Written br J.Mock and M.Seifert
#
# Optional commands to make running this fun
	echo "Reading file..."
	sleep 1
	echo "Totaling data..."
	sleep 1
#
# Declare
	json_file="$1"
	arg2="$2"
	arg3="$3"
	fieldname=""
	target_date=""
#
if [ $# -lt 1 ] || [ $# -gt 3 ]; then
    echo "Usage: $0 <json_file> [fieldname] [date]"
    echo "Examples:"
    echo "  $0 LIVE-DAR.json"
    echo "  $0 LIVE-DAR.json TotalSales"
    echo "  $0 LIVE-DAR.json 10-22-2025"
    echo "  $0 LIVE-DAR.json TotalSales 10-22-2025"
    exit 1
fi
#
if ! command -v jq >/dev/null 2>&1; then
    echo "Error: jq is not installed. Please install it (e.g. sudo apt install jq)."
    exit 1
fi

# --- Helpers ---
time_to_minutes() {
    local time_str="$1"
    [[ -z "$time_str" || "$time_str" == "null" ]] && echo 0 && return
    local hours="${time_str%%:*}"
    local minutes="${time_str##*:}"
    hours=$((10#$hours))
    minutes=$((10#$minutes))
    echo $((hours * 60 + minutes))
}
#
minutes_to_time() {
    local total_minutes="$1"
    local hours=$((total_minutes / 60))
    local minutes=$((total_minutes % 60))
    printf "%d:%02d" "$hours" "$minutes"
}
#
# --- Field lists ---
numeric_fields=(
    "TotalSales"
    "ActualPunchedDollars"
    "ActualTransactions"
    "ProjectedTransactions"
    "ActualSandwichCount"
    "ProjectedSandwichCount"
    "CrewActualPunchedDollars"
)
#
time_fields=(
    "ActualPunchedHours"
    "SalariedManagerScheduledHours"
    "TotalScheduleHours"
    "TotalNeededHours"
    "CrewLaborHours"
    "VLHScheduledHours"
    "FixedScheduledHours"
    "FloorMgmtScheduledHours"
    "UnassignedVLHScheduleHours"
    "UnassignedFixedScheduleHours"
    "UnassignedFloorMgmtScheduleHours"
    "VLHNeededHours"
    "FloorMgmtNeededHours"
)
#
# --- Detect whether arg2 is a field or a date ---
if [[ "$arg2" =~ ^[0-9]{2}-[0-9]{2}-[0-9]{4}$ ]]; then
    target_date="$arg2"
elif [[ -n "$arg2" ]]; then
    fieldname="$arg2"
fi
#
if [[ "$arg3" =~ ^[0-9]{2}-[0-9]{2}-[0-9]{4}$ ]]; then
    target_date="$arg3"
fi
#
# --- Select fields to process ---
fields_to_process=()
if [ -n "$fieldname" ]; then
    fields_to_process=("$fieldname")
else
    fields_to_process=("${numeric_fields[@]}" "${time_fields[@]}")
fi
#
# --- Select dates ---
if [ -n "$target_date" ]; then
    dates="$target_date"
else
    dates=$(jq -r '.[].Date' "$json_file")
fi

# --- Main loop ---
while IFS= read -r date; do
    echo "---- Date: $date ----"

    for field in "${fields_to_process[@]}"; do
        # check if it's numeric or time
        if [[ " ${numeric_fields[*]} " == *" $field "* ]]; then
            total=$(jq -r --arg date "$date" --arg field "$field" '
                .[] | select(.Date == $date) | .QuarterHourEndTime |
                to_entries[] | .value[$field] | tonumber
            ' "$json_file" | jq -s 'add // 0')
            printf "%s: %.2f\n" "$field" "$total"
        elif [[ " ${time_fields[*]} " == *" $field "* ]]; then
            total_minutes=0
            while IFS= read -r time_str; do
                [[ -z "$time_str" || "$time_str" == "null" ]] && continue
                mins=$(time_to_minutes "$time_str")
                total_minutes=$((total_minutes + mins))
            done < <(jq -r --arg date "$date" --arg field "$field" '
                .[] | select(.Date == $date) | .QuarterHourEndTime |
                to_entries[] | .value[$field]
            ' "$json_file")

            total_time=$(minutes_to_time "$total_minutes")
            echo "$field: $total_time"
        else
            echo "$field: (unknown field)"
        fi
    done

    echo ""
done <<< "$dates"
